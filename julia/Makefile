include ../common.mk

# By default, build all the dockerfiles
all: dockerfiles

# All the versions we'll generate Dockerfiles for
VERS:=$(VERS) v0.4.0 v0.4.1 v0.4.2 v0.4.3 v0.4.4 v0.4.5 v0.4.6 v0.4.7
VERS:=$(VERS) v0.5.0 v0.5.1 v0.5.2
VERS:=$(VERS) v0.6.0-rc2

# Convenience function to build the docker tag for an image 
define julia_tag_name
$(shell echo -n staticfloat/julia:$(firstword $(subst -, ,$(2)))-$(1))
endef

# Arch-dependent values
ARCHS=x64 x86 ppc64le aarch64 armv7l
ARCH_FLAGS-x64=MARCH=core2
ARCH_FLAGS-x86=JULIA_CPU_TARGET=pentium4 MARCH=pentium4
ARCH_FLAGS-ppc64le=JULIA_CPU_TARGET=pwr8
ARCH_FLAGS-aarch64=JULIA_CPU_TARGET=generic MARCH=armv8-a
ARCH_FLAGS-armv7l=JULIA_CPU_TARGET=generic MARCH=armv7-a

IMAGE-x64=multiarch/debian-debootstrap:amd64-stretch
IMAGE-x86=multiarch/debian-debootstrap:i386-stretch
IMAGE-ppc64le=multiarch/debian-debootstrap:ppc64el-stretch
IMAGE-aarch64=multiarch/debian-debootstrap:arm64-stretch
IMAGE-armv7l=multiarch/debian-debootstrap:armhf-stretch

# Only on x86 and armv7l will we set L32
L32-x86=linux32
L32-armv7l=linux32

define build_dockerfile
build/$(2)/Dockerfile.$(1): Makefile Dockerfile
	@mkdir -p $$(dir $$@)
	@echo $(2)-$(1)
	@echo "## This file was autogenerated" > "$$@"
	@echo "# Do not edit directly; edit Makefile" >> "$$@"
	@echo "FROM $(IMAGE-$(1))" >> "$$@"
	@echo >> "$$@"
	@echo "# Set things like MARCH and JULIA_CPU_TYPES" >> "$$@"
	@echo "ARG ARCH_FLAGS=\"$(ARCH_FLAGS-$(1))\"" >> "$$@"
	@echo "ARG L32=\"$(L32-$(1))\"" >> "$$@"
	@echo "ARG REVISION=\"$(2)\"" >> "$$@"
	@echo >> "$$@"
	@cat Dockerfile >> "$$@"

build-$(2)-$(1): build/$(2)/Dockerfile.$(1)
	$(DOCKER_BUILD) --pull -t $(call julia_tag_name,$(1),$(2)) -f build/$(2)/Dockerfile.$(1) build/$(2)

push-$(2)-$(1):
	docker push staticfloat/julia:$(call julia_tag_name,$(1),$(2))
endef

# Construct the actual build targets for all the dockerfiles
$(foreach v,$(VERS),$(foreach a,$(ARCHS),$(eval $(call build_dockerfile,$(a),$(v)))))

# Build "dockerfiles" target that assembles all Dockerfiles
$(foreach v,$(VERS),$(foreach a,$(ARCHS),$(eval $(call add_dep,dockerfiles,build/$(v)/Dockerfile.$(a)))))

# Build "buildall" target that attempts to build every Dockerfile in the room,
# but only from the ones that our build architecture can manage.
$(foreach v,$(VERS),$(foreach a,$(BUILD_ARCHS),$(eval $(call add_dep,buildall,build-$(v)-$(a)))))

# Build "pushall" target that pushes up the result of "buildall"
$(foreach v,$(VERS),$(foreach a,$(BUILD_ARCHS),$(eval $(call add_dep,pushall,push-$(v)-$(a)))))

clean:
	rm -rf build
