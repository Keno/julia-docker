include ../common.mk

# By default, build all the dockerfiles
all: dockerfiles

# Julia tag name
JULIA_TAG=v0.6.0-rc2

# Convenience function to build the docker tag for an image 
define julia_tag_name
$(shell echo -n staticfloat/julia:$(call major_version,$(JULIA_TAG))-$(1))
endef

# Arch-dependent values
ARCHS=x64 x86 ppc64le aarch64 armv7l
ARCH_FLAGS-x64=MARCH=core2
ARCH_FLAGS-x86=JULIA_CPU_TARGET=pentium4 MARCH=pentium4
ARCH_FLAGS-ppc64le=JULIA_CPU_TARGET=pwr8
ARCH_FLAGS-aarch64=JULIA_CPU_TARGET=generic MARCH=armv8-a
ARCH_FLAGS-armv7l=JULIA_CPU_TARGET=generic MARCH=armv7-a

IMAGE-x64=multiarch/debian-debootstrap:amd64-stretch
IMAGE-x86=multiarch/debian-debootstrap:i386-stretch
IMAGE-ppc64le=multiarch/debian-debootstrap:ppc64le-stretch
IMAGE-aarch64=multiarch/debian-debootstrap:arm64-stretch
IMAGE-armv7l=multiarch/debian-debootstrap:armhf-stretch

# Only on x86 and armv7l will we set L32
L32-x86=linux32
L32-armv7l=linux32

define build_dockerfile
build/$(1):
	@mkdir -p build/$(1)

build/$(1)/Dockerfile: build/$(1) Makefile Dockerfile
	@echo $(1)
	@echo "## This file was autogenerated" > "build/$(1)/Dockerfile"
	@echo "# Do not edit directly; edit Makefile" >> "build/$(1)/Dockerfile"
	@echo "FROM $(IMAGE-$(subst build-,,$(1)))" >> "build/$(1)/Dockerfile"
	@echo >> "build/$(1)/Dockerfile"
	@echo "# Set things like MARCH and JULIA_CPU_TYPES" >> "build/$(1)/Dockerfile"
	@echo "ARG ARCH_FLAGS=\"$(ARCH_FLAGS-$(1))\"" >> "build/$(1)/Dockerfile"
	@echo "ARG L32=\"$(L32-$(1))\"" >> "build/$(1)/Dockerfile"
	@echo >> "build/$(1)/Dockerfile"
	@cat Dockerfile >> "build/$(1)/Dockerfile"

build-$(1): build/$(1)/Dockerfile
	$(DOCKER_BUILD) --pull --build-arg REVISION=$(JULIA_TAG) -t $(call julia_tag_name,$(1)) build/$(1)

push-$(1):
	docker push staticfloat/julia:$(1)
endef

# Construct the actual build targets for all the dockerfiles
$(foreach a,$(ARCHS),$(eval $(call build_dockerfile,$(a))))

# Build "dockerfiles" target that assembles all Dockerfiles
$(foreach a,$(ARCHS),$(eval $(call add_dep,dockerfiles,build/$(a)/Dockerfile)))

# Build "buildall" target that attempts to build every Dockerfile in the room,
# but only from the ones that our build architecture can manage.
$(foreach a,$(BUILD_ARCHS),$(eval $(call add_dep,buildall,build-$(a))))

# Build "pushall" target that pushes up the result of "buildall"
$(foreach a,$(BUILD_ARCHS),$(eval $(call add_dep,pushall,push-$(a))))

clean:
	rm -rf build
