include ../common.mk

buildall:

# Build "buildall" target that builds the docker-compose directories
$(foreach f,$(HFS),$(eval $(call add_dep,buildall,build-$(f))))

# Build "upall" target that brings up all images that are compatible with our arch
$(foreach f,$(BUILD_HFS),$(eval $(call add_dep,deployall,deploy-$(f))))

# Here's where we take our templates and build docker-compose files out of them
define build_dockercompose
build-$(1): build/$(1)/docker-compose.yml
build/$(1)/docker-compose.yml: docker-compose.template.yml Dockerfile.template entrypoint.sh secret.env ../workerbase/$(1).harbor
	@echo $(1)
	@rm -rf "build/$(1)"
	@mkdir -p "build/$(1)/worker"
	@ln -sf ../../secret.env "build/$(1)/.env"
	@sed -e "s/{service_name}/$(1)/g" docker-compose.template.yml > "build/$(1)/docker-compose.yml"
	@case $(call tag_name,$(1)) in \
		*x86) sed -i.bak -e "s/{linux32}/linux32/g" "build/$(1)/docker-compose.yml";; \
		*)    sed -i.bak -e "s/{linux32}/       /g" "build/$(1)/docker-compose.yml";; \
	esac
	@rm -f build/$(1)/*.bak
	@echo "## This file was autogenerated" > "build/$(1)/worker/Dockerfile"
	@echo "# Do not edit directly; edit the template files" >> "build/$(1)/worker/Dockerfile"
	@echo "FROM $(call tag_name,$(1))" >> "build/$(1)/worker/Dockerfile"
	@cat Dockerfile.template >> "build/$(1)/worker/Dockerfile"
	@cp ./entrypoint.sh "build/$(1)/worker/entrypoint.sh"

pull-$(1):
	docker pull $(call tag_name,$(1))

deploy-$(1): build-$(1)
	@# Build our new worker, take down the old one and bring the new one up
	@cd build/$(1); \
	docker-compose build --pull; \
	docker-compose down --remove-orphans; \
	docker-compose up -d
endef

# Call build_dockercompose on each and every harborfile
$(foreach f,$(HFS),$(eval $(call build_dockercompose,$(f))))


clean:
	rm -rf build
