## This file was autogenerated
# Do not edit directly; edit the .harbor files
#
# To build this docker image via `make`, run `make build-centos6_9-x86` in the `tabularasa` directory
# To build this docker image manually, run `docker build --pull -t staticfloat/julia_tabularasa:centos6_9-x86 .`

FROM staticfloat/centos-i386:centos6

# This enables putting `linux32` before commands like `./configure` and `make`
ARG L32=linux32

MAINTAINER Elliot Saba <staticfloat@gmail.com>
USER root

# We create a `buildworker` user so that we don't have to run everything as root
RUN useradd -u 1337 -m -s /bin/bash buildworker || true

# These are where we'll do all our work, so make them now
RUN mkdir -p /src /downloads
RUN chown buildworker:buildworker /src /downloads

# We use the "download_unpack.sh" command a lot, throw it into /usr/bin
COPY download_unpack.sh /usr/bin

# Add ourselves to sudoers
RUN mkdir -p /etc/sudoers.d
RUN echo "buildworker ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/buildworker

# We want to be able to do things like "source"
SHELL ["/bin/bash", "-c"]
RUN yum update -y && yum install -y gcc gcc-c++ make openssl-devel zlib-devel bzip2-devel curl tar xz
## Install python
ARG python_version=2.7.13
ARG python_url=https://www.python.org/ftp/python/${python_version}/Python-${python_version}.tar.xz
ARG pip_url=https://bootstrap.pypa.io/get-pip.py

USER buildworker
WORKDIR /src

# Use download_unpack to download and unpack python
RUN download_unpack.sh "${python_url}"

# Build the python sources!
WORKDIR /src/Python-${python_version}
RUN ${L32} ./configure --prefix=/usr/local
RUN ${L32} make -j4

# Install python
USER root
RUN ${L32} make install

# Install pip and install virtualenv (all as root, of course)
RUN curl -q -# -L "${pip_url}" -o get-pip.py
RUN python ./get-pip.py
RUN pip install virtualenv

# Now cleanup /src
WORKDIR /src
RUN rm -rf Python-${python_version}
RUN rm -f get-pip.py


USER root

# We need to override ld.so.conf to search /usr/local before /usr
RUN echo "/usr/local/lib64" > /etc/ld.so.conf.new; \
    echo "/usr/local/lib" >> /etc/ld.so.conf.new; \
    cat /etc/ld.so.conf >> /etc/ld.so.conf.new; \
    mv /etc/ld.so.conf.new /etc/ld.so.conf; \
    ldconfig

# Cleanup downloads
RUN rm -rf /downloads

# Remove bootstrapping compiler toolchain if we need to
RUN if [[ -n "${TEMPORARY_DEPS}" ]]; then \
        if [[ -n "$(which yum 2>/dev/null)" ]]; then \
            yum remove -y ${TEMPORARY_DEPS}; \
            yum clean all; \
        elif [[ -n "$(which apt-get 2>/dev/null)" ]]; then \
            apt-get remove -y ${TEMPORARY_DEPS}; \
            apt-get autoremove -y; \
            apt-get clean -y; \
        fi; \
    fi

# Set a default working directory that we know is good
WORKDIR /

# Use /entrypoint.sh to conditionally apply ${L32} since we cna't use ARG
# values within an actual ENTRYPOINT command.  :(
RUN echo "#!/bin/bash" > /entrypoint.sh; \
    echo "${L32} \"\$@\"" >> /entrypoint.sh; \
    chmod +x /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]
CMD ["/bin/bash"]
USER buildworker
