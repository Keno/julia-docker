HFS=$(notdir $(basename $(wildcard ../workerbase/*.harbor)))
define add_dep
$(1): $(2)
endef
# Build "all" target that depends on all the harbor files from `workerbase`
$(foreach f,$(HFS),$(eval $(call add_dep,all,../workerbase/$(f).harbor)))

# Here's where we take our two "template" files
all: docker-compose.template.yml Dockerfile.template
	@for f in $(HFS); do \
		echo "$$f"; \
		IMAGE_NAME="$$(echo staticfloat/julia_workerbase_$$f | tr '-' ':')"; \
		rm -rf "build/$$f"; \
		mkdir -p "build/$$f/worker"; \
		ln -sf ../../secret.env "build/$$f/.env"; \
		sed -e "s/{service_name}/$$f/g" docker-compose.template.yml > "build/$$f/docker-compose.yml"; \
		case $$IMAGE_NAME in \
			*x86) sed -i.bak -e "s/{L32}/linux32/g" "build/$$f/docker-compose.yml";; \
			*)    sed -i.bak -e "s/{L32}/       /g" "build/$$f/docker-compose.yml";; \
		esac; \
		rm -f build/$$f/*.bak; \
		echo "## This file autogenerated on $(shell date)" > "build/$$f/worker/Dockerfile"; \
		echo "# Do not edit directly; edit the template files" >> "build/$$f/worker/Dockerfile"; \
		echo "FROM $$IMAGE_NAME" >> "build/$$f/worker/Dockerfile"; \
		cat Dockerfile.template >> "build/$$f/worker/Dockerfile"; \
	done

clean:
	rm -rf build
