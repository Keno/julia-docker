## This file was autogenerated
# Do not edit directly; edit the .harbor files

FROM ivochkin/ubuntu-i386:xenial

# This enables putting `linux32` before commands like `./configure` and `make`
ENV L32 "linux32"

## Download and install needed build dependencies for x86_64 apt-based systems
# Start with tools that I love and always need by my side
RUN $L32 apt update && $L32 apt install -y htop tmux vim curl

# Move on to bare necessities for Julia
RUN $L32 apt install -y build-essential g++ gcc gfortran m4 make libssl-dev patch

# Dependencies we need to build git
RUN $L32 apt install -y libcurl4-openssl-dev libexpat1-dev gettext

# Dependencies we need to build gcc
RUN $L32 apt install -y wget

# Dependencies we need to build python
RUN $L32 apt install -y zlib1g-dev libbz2-dev
## Install GCC
ARG binutils_version=2.27
ARG binutils_url=https://ftp.gnu.org/gnu/binutils/binutils-${binutils_version}.tar.gz
ARG gcc_version=6.3.0
ARG gcc_url=https://mirrors-usa.go-parts.com/gcc/releases/gcc-${gcc_version}/gcc-${gcc_version}.tar.gz

RUN mkdir -p /src
WORKDIR /src

# Download/extract both binutils and gcc
RUN curl -q -# -L "${binutils_url}" -o binutils-${binutils_version}.tar.gz
RUN curl -q -# -L "${gcc_url}" -o gcc-${gcc_version}.tar.gz
RUN tar zxf binutils-${binutils_version}.tar.gz
RUN tar zxf gcc-${gcc_version}.tar.gz

# Build binutils!
WORKDIR /src/binutils-${binutils_version}
RUN $L32 ./configure --prefix=/usr/local
RUN $L32 make -j4
RUN $L32 make install

# Build gcc!
WORKDIR /src/gcc-${gcc_version}
RUN $L32 contrib/download_prerequisites
RUN mkdir -p /src/gcc-${gcc_version}_build
WORKDIR /src/gcc-${gcc_version}_build
RUN $L32 /src/gcc-${gcc_version}/configure --prefix=/usr/local --enable-host-shared --enable-threads=posix --enable-languages=c,c++,fortran --disable-multilib
RUN $L32 make -j4
RUN $L32 make install

# Setup environment variables so that GCC takes precedence
ENV PATH "/usr/local/bin:$PATH"
ENV LD_LIBRARY_PATH "/usr/local/lib:/usr/local/lib64:$LD_LIBRARY_PATH"

# Now cleanup /src
WORKDIR /src
RUN rm -rf gcc-${gcc_version}*
RUN rm -rf binutils-${binutils_version}*
## Install git
ARG git_version=2.11.0
ARG git_url=https://github.com/git/git/archive/v${git_version}.tar.gz

RUN mkdir -p /src
WORKDIR /src

# Download, extract, and build git
RUN curl -q -# -L "${git_url}" -o git-${git_version}.tgz
RUN tar zxf git-${git_version}.tgz
WORKDIR /src/git-${git_version}
RUN $L32 make prefix=/usr/local all -j4
RUN $L32 make prefix=/usr/local install

# cleanup /src
WORKDIR /src
RUN rm -rf git-${git_version}*
## Install cmake into /usr/local
ARG cmake_version=3.6.2
ARG cmake_url=https://cmake.org/files/v3.6/cmake-${cmake_version}.tar.gz

RUN mkdir -p /src
WORKDIR /src

# Unfortunately, we have to pass `-k` to `curl` because cmake.org has weird SSL
# certificates, and old versions of `curl` can't deal with it.  :(
RUN curl -q -# -L -k "${cmake_url}" -o cmake-${cmake_version}.tar.gz
RUN tar zxf cmake-${cmake_version}.tar.gz


# Build the cmake sources!
WORKDIR /src/cmake-${cmake_version}
RUN $L32 ./configure --prefix=/usr/local
RUN $L32 make -j4
RUN $L32 make install

# Now cleanup /src
WORKDIR /src
RUN rm -rf cmake-${cmake_version}*
## Install python
ARG python_version=2.7.13
ARG python_url=https://www.python.org/ftp/python/${python_version}/Python-${python_version}.tgz
ARG pip_url=https://bootstrap.pypa.io/get-pip.py

RUN mkdir -p /src
WORKDIR /src

# Download/extract both Python and pip
RUN curl -q -# -L "${python_url}" -o Python-${python_version}.tgz
RUN curl -q -# -L "${pip_url}" -o get-pip.py
RUN tar zxf Python-${python_version}.tgz

# Build the python sources!
WORKDIR /src/Python-${python_version}
RUN $L32 ./configure --prefix=/usr/local
RUN $L32 make -j4
RUN $L32 make install

# Install pip, get requests with security (for SNI), and install virtualenv
RUN python /src/get-pip.py
RUN pip install virtualenv

# Now cleanup /src
WORKDIR /src
RUN rm -rf Python-${python_version}*
RUN rm -f get-pip.py
## Install tar
ARG tar_version=1.29
ARG tar_url=https://ftp.gnu.org/gnu/tar/tar-${tar_version}.tar.gz

RUN mkdir -p /src
WORKDIR /src

# Download/extract tar
RUN curl -q -# -L "${tar_url}" -o tar-${tar_version}.tar.gz
RUN tar zxf tar-${tar_version}.tar.gz

# Build the tar sources!
WORKDIR /src/tar-${tar_version}
# FORCE_UNSAFE_CONFIGURE because we're running as root, and CPPFLAGS because of
# this link: https://goo.gl/lKju1q
RUN FORCE_UNSAFE_CONFIGURE=1 $L32 ./configure --prefix=/usr/local CPPFLAGS="-fgnu89-inline"
RUN $L32 make -j4
RUN $L32 make install

# We need to pretend to be `gtar` as well
RUN ln -s /usr/local/bin/tar /usr/local/bin/gtar

# Now cleanup /src
WORKDIR /src
# Sigh, see https://github.com/docker/docker/issues/13451 for context
RUN [[ -d tar-${tar_version}/confdir3 ]] && \
    mv tar-${tar_version}/confdir3/confdir3 tar-${tar_version}/confdir4 && \
    rm -rf tar-${tar_version}/confdir*
RUN rm -rf tar-${tar_version}*

WORKDIR /
ENTRYPOINT ["linux32"]
CMD ["/bin/bash"]
