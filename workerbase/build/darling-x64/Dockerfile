## This file was autogenerated
# Do not edit directly; edit the .harbor files
#
# To build this docker image via `make`, run `make build-darling-x64` in the `workerbase` directory
# To build this docker image manually, run `docker build --pull -t staticfloat/julia_workerbase:darling-x64 .`

# Build an image that contains all of our cross compilers and all that stuff.
# Since we need virtually everything within the actual workerbase image, just
# build off of that one instead of compiling it all over again
FROM ubuntu:trusty

# Setup a few things we need in order to make it through the build properly
MAINTAINER Elliot Saba <staticfloat@gmail.com>
USER root

# We create a `buildworker` user so that we don't have to run everything as root
RUN useradd -u 1337 -m -s /bin/bash buildworker || true

# These are where we'll do all our work, so make them now
RUN mkdir -p /src /downloads
RUN chown buildworker:buildworker /src /downloads

# We use the "download_unpack.sh" command a lot, throw it into /usr/bin
COPY download_unpack.sh /usr/bin

# We want to be able to do things like "source"
SHELL ["/bin/bash", "-c"]

# Install build tools (BUILD_TOOLS are things needed during the build, but not at runtime)
ARG TEMPORARY_DEPS="build-essential gobjc gobjc++ clang libfuse-dev libfreetype6-dev libtiff-dev libgl1-mesa-dev linux-headers-generic"
RUN apt update && apt install -y ${TEMPORARY_DEPS} sudo curl make patch tar gawk autoconf python libtool git bison flex pkg-config zip unzip gdb
RUN echo "buildworker ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
RUN sed -i.bak -e 's/Defaults[[:space:]]*env_reset//g' /etc/sudoers
RUN sed -i.bak -e 's/Defaults[[:space:]]*secure_path=.*//g' /etc/sudoers
USER buildworker

## Install cmake into /usr/local
ARG cmake_version=3.6.3
ARG cmake_url=https://cmake.org/files/v3.6/cmake-${cmake_version}.tar.gz

USER buildworker
WORKDIR /src

# Unfortunately, we have to pass `-k` to `curl` because cmake.org has weird SSL
# certificates, and old versions of `curl` can't deal with it.  :(
RUN EXTRA_CURL_FLAGS="-k" download_unpack.sh "${cmake_url}"

# Build the cmake sources!
WORKDIR /src/cmake-${cmake_version}
RUN ${L32} ./configure --prefix=/usr/local
RUN ${L32} make -j4

# Install as root
USER root
RUN ${L32} make install

# Now cleanup /src
WORKDIR /src
RUN rm -rf cmake-${cmake_version}

# Get our bash script library ready
COPY build_crosscompiler.sh /build.sh
COPY patches /downloads/patches

USER root
RUN apt install -y linux-headers-generic

# build osx cross-compiler
ENV target="x86_64-apple-darwin14"
USER buildworker
WORKDIR /src
RUN git clone --recursive https://github.com/darlinghq/darling.git
RUN mkdir -p /src/darling/build
#ENV linux_version=${linux_version:-4.12}
#RUN source /build.sh; install_kernel_headers
WORKDIR /src/darling/build
RUN cmake .. -DCMAKE_TOOLCHAIN_FILE=../Toolchain.cmake -DCMAKE_INSTALL_PREFIX=/opt/${target}
RUN make V=1 VERBOSE=1

# Override normal uname with something that fakes out based on ${target}
USER root
COPY fake_uname.sh /usr/local/bin/uname
RUN chmod +x /usr/local/bin/uname

USER root

# We need to override ld.so.conf to search /usr/local before /usr
RUN echo "/usr/local/lib64" > /etc/ld.so.conf.new; \
    echo "/usr/local/lib" >> /etc/ld.so.conf.new; \
    cat /etc/ld.so.conf >> /etc/ld.so.conf.new; \
    mv /etc/ld.so.conf.new /etc/ld.so.conf; \
    ldconfig

# Cleanup downloads
RUN rm -rf /downloads

# Remove bootstrapping compiler toolchain if we need to
RUN if [[ -n "${TEMPORARY_DEPS}" ]]; then \
        if [[ -n "$(which yum 2>/dev/null)" ]]; then \
            yum remove -y ${TEMPORARY_DEPS}; \
            yum clean all; \
        elif [[ -n "$(which apt-get 2>/dev/null)" ]]; then \
            apt-get remove -y ${TEMPORARY_DEPS}; \
            apt-get autoremove -y; \
            apt-get clean -y; \
        fi; \
    fi

# Set a default working directory that we know is good
WORKDIR /

# Use /entrypoint.sh to conditionally apply ${L32} since we cna't use ARG
# values within an actual ENTRYPOINT command.  :(
RUN echo "#!/bin/bash" > /entrypoint.sh; \
    echo "${L32} \"\$@\"" >> /entrypoint.sh; \
    chmod +x /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]
CMD ["/bin/bash"]
USER buildworker
