## This file was autogenerated
# Do not edit directly; edit the .harbor files
#
# To build this docker image via `make`, run `make build-debian7_11-armv7l` in the `tabularasa` directory
# To build this docker image manually, run `docker build --pull -t staticfloat/julia_tabularasa:debian7_11-armv7l .`

FROM armhf/debian:wheezy

# This enables putting `linux32` before commands like `./configure` and `make`
ARG L32=linux32

MAINTAINER Elliot Saba <staticfloat@gmail.com>
USER root

# We create a `buildworker` user so that we don't have to run everything as root
RUN useradd -u 1337 -m -s /bin/bash buildworker || true

# These are where we'll do all our work, so make them now
RUN mkdir -p /src /downloads
RUN chown buildworker:buildworker /src /downloads

# We use the "download_unpack.sh" command a lot, throw it into /usr/bin
COPY download_unpack.sh /usr/bin

# We want to be able to do things like "source"
SHELL ["/bin/bash", "-c"]
RUN apt-get update && apt-get install -y python python-dev curl build-essential
RUN curl -L 'https://bootstrap.pypa.io/get-pip.py' | python

# This enables qemu-*-static emulation on x86_64
ARG QEMU_ARCH=arm
USER root
# Install binfmt-support
RUN [ -z $(which apt-get 2>/dev/null) ] || apt-get install -y binfmt-support

# Download latest qemu-user-static releases
ARG QEMU_VER=2.8.3
RUN curl -L https://github.com/multiarch/qemu-user-static/releases/download/v${QEMU_VER}/qemu-${QEMU_ARCH}-static -o /usr/bin/qemu-${QEMU_ARCH}-static
RUN chmod +x /usr/bin/qemu-${QEMU_ARCH}-static

USER root

# We need to override ld.so.conf to search /usr/local before /usr
RUN echo "/usr/local/lib64" > /etc/ld.so.conf.new; \
    echo "/usr/local/lib" >> /etc/ld.so.conf.new; \
    cat /etc/ld.so.conf >> /etc/ld.so.conf.new; \
    mv /etc/ld.so.conf.new /etc/ld.so.conf; \
    ldconfig

# Cleanup downloads
RUN rm -rf /downloads

# Remove bootstrapping compiler toolchain if we need to
RUN if [[ -n "${TEMPORARY_DEPS}" ]]; then \
        if [[ -n "$(which yum 2>/dev/null)" ]]; then \
            yum remove -y ${TEMPORARY_DEPS}; \
            yum clean all; \
        elif [[ -n "$(which apt-get 2>/dev/null)" ]]; then \
            apt-get remove -y ${TEMPORARY_DEPS}; \
            apt-get autoremove -y; \
            apt-get clean -y; \
        fi; \
    fi

# Set a default working directory that we know is good
WORKDIR /

# Use /entrypoint.sh to conditionally apply ${L32} since we cna't use ARG
# values within an actual ENTRYPOINT command.  :(
RUN echo "#!/bin/bash" > /entrypoint.sh; \
    echo "${L32} \"\$@\"" >> /entrypoint.sh; \
    chmod +x /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]
CMD ["/bin/bash"]
USER buildworker
