## This file was autogenerated
# Do not edit directly; edit the .harbor files
#
# To build this docker image via `make`, run `make build-debian7_11-armv7l` in the `workerbase` directory
# To build this docker image manually, run `docker build --pull -t staticfloat/tabularasa_debian7_11:armv7l .`

FROM armhf/debian:wheezy

# This enables putting `linux32` before commands like `./configure` and `make`
ARG L32=linux32

# We need to manually override binutils/gcc's host triplets
ARG TRIPLET="arm-linux-gnueabihf"
ARG EXTRA_BINTULS_CONFIG_FLAGS="--host=${TRIPLET} --build=${TRIPLET} --target=${TRIPLET} --enable-lto --enable-plugins"
ARG EXTRA_GCC_CONFIG_FLAGS="--host=${TRIPLET} --build=${TRIPLET} --target=${TRIPLET} --with-arch=armv7-a --with-float=hard --with-fpu=vfpv3-d16 --enable-lto --enable-plugin"

MAINTAINER Elliot Saba <staticfloat@gmail.com>
USER root

# We create a `buildworker` user so that we don't have to run everything as root
RUN useradd -m -s /bin/bash buildworker

# This is where we'll do all our work, so make it now
RUN mkdir -p /src
RUN chown buildworker:buildworker /src
## Download and install needed build dependencies for x86_64 apt-based systems
USER root

# Start with tools that I love and always need by my side
RUN ${L32} apt-get update && ${L32} apt-get install -y htop tmux vim curl gdb procps

# Move on to bare necessities for Julia
RUN ${L32} apt-get install -y build-essential g++ gcc gfortran m4 make libssl-dev patch

# Dependencies we need to build git
RUN ${L32} apt-get install -y libcurl4-openssl-dev libexpat1-dev gettext

# Dependencies we need to build gcc
RUN ${L32} apt-get install -y wget

# Dependencies we need to build python
RUN ${L32} apt-get install -y zlib1g-dev libbz2-dev
## Install python
ARG python_version=2.7.13
ARG python_url=https://www.python.org/ftp/python/${python_version}/Python-${python_version}.tar.xz
ARG pip_url=https://bootstrap.pypa.io/get-pip.py

USER buildworker
WORKDIR /src

# Download/extract both Python and pip
RUN curl -q -# -L "${python_url}" -o Python-${python_version}.tar.xz
RUN curl -q -# -L "${pip_url}" -o get-pip.py
RUN tar Jxf Python-${python_version}.tar.xz

# Build the python sources!
WORKDIR /src/Python-${python_version}
RUN ${L32} ./configure --prefix=/usr/local
RUN ${L32} make -j4

# Install python
USER root
RUN ${L32} make install

# Install pip and install virtualenv (all as root, of course)
RUN python /src/get-pip.py
RUN pip install virtualenv

# Now cleanup /src
WORKDIR /src
RUN rm -rf Python-${python_version}*
RUN rm -f get-pip.py

# This enables qemu-*-static emulation on x86_64
ARG QEMU_ARCH=arm
USER root
# Install binfmt-support
RUN [ -z $(which apt-get 2>/dev/null) ] || apt-get install -y binfmt-support

# Download latest qemu-user-static releases
ARG QEMU_VER=2.8.3
RUN curl -L https://github.com/multiarch/qemu-user-static/releases/download/v${QEMU_VER}/qemu-${QEMU_ARCH}-static -o /usr/bin/qemu-${QEMU_ARCH}-static
RUN chmod +x /usr/bin/qemu-${QEMU_ARCH}-static

USER root

# We need to override ld.so.conf to search /usr/local before /usr
RUN echo "/usr/local/lib64" > /etc/ld.so.conf.new; \
    echo "/usr/local/lib" >> /etc/ld.so.conf.new; \
    cat /etc/ld.so.conf >> /etc/ld.so.conf.new; \
    mv /etc/ld.so.conf.new /etc/ld.so.conf; \
    ldconfig

# These are our final words. Always.
WORKDIR /

# Use /entrypoint.sh hack to get around the whole ${L32} ARG not being used in ENTRYPOINT thing.
RUN echo "#!/bin/bash" > /entrypoint.sh; echo "${L32} \"\$@\"" >> /entrypoint.sh; chmod +x /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]
CMD ["/bin/bash"]
USER buildworker

