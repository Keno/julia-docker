## This file autogenerated via harbor on Thu Dec 29 23:44:41 PST 2016
# Do not edit directly; edit the .harbor files

FROM centos:5

## Download and install needed build dependencies for x86_64 yum-based systems
# Start with tools that I love and always need by my side
RUN $L32 yum update -y && $L32 yum install -y htop tmux vim git curl net-tools which

# Move on to bare necessities for Julia
RUN $L32 yum install -y gcc gcc-c++ gcc-gfortran m4 make openssl openssl-devel

# Dependencies we need to build gcc
RUN $L32 yum install -y wget

# Dependencies we need to build python
RUN $L32 yum install -y zlib-devel bzip2-devel
## Install GCC
ENV binutils_version 2.27
ENV binutils_url https://ftp.gnu.org/gnu/binutils/binutils-${binutils_version}.tar.gz
ENV gcc_version 6.3.0
ENV gcc_url https://mirrors-usa.go-parts.com/gcc/releases/gcc-${gcc_version}/gcc-${gcc_version}.tar.gz

RUN mkdir -p /src
WORKDIR /src

# Download/extract both binutils and gcc
RUN curl -q -# -L "${binutils_url}" -o binutils-${binutils_version}.tar.gz
RUN curl -q -# -L "${gcc_url}" -o gcc-${gcc_version}.tar.gz
RUN tar zxf binutils-${binutils_version}.tar.gz
RUN tar zxf gcc-${gcc_version}.tar.gz

# Build binutils!
WORKDIR /src/binutils-${binutils_version}
RUN $L32 ./configure --prefix=/usr
RUN $L32 make -j6
RUN $L32 make install

# Build gcc!
WORKDIR /src/gcc-${gcc_version}
RUN $L32 contrib/download_prerequisites
RUN mkdir -p /src/gcc-${gcc_version}_build
WORKDIR /src/gcc-${gcc_version}_build
RUN $L32 /src/gcc-${gcc_version}/configure --prefix=/usr --enable-host-shared --enable-threads=posix --enable-languages=c,c++,fortran --disable-multilib
RUN $L32 make -j6
RUN $L32 make install

# Now cleanup /src
WORKDIR /src
RUN rm -rf gcc-${gcc_version}*
RUN rm -rf binutils-${binutils_version}*
## Install cmake into /usr/local
ENV cmake_version 3.6.2
ENV cmake_url https://cmake.org/files/v3.6/cmake-${cmake_version}.tar.gz

RUN mkdir -p /src
WORKDIR /src

# Unfortunately, we have to pass `-k` to `curl` because cmake.org has weird SSL
# certificates, and old versions of `curl` can't deal with it.  :(
RUN curl -q -# -L -k "${cmake_url}" -o cmake-${cmake_version}.tar.gz
RUN tar zxf cmake-${cmake_version}.tar.gz


# Build the cmake sources!
WORKDIR /src/cmake-${cmake_version}
RUN $L32 ./configure --prefix=/usr
RUN $L32 make -j6
RUN $L32 make install

# Now cleanup /src
WORKDIR /src
RUN rm -rf cmake-${cmake_version}*
## Install python
ENV python_version 2.7.13
ENV python_url https://www.python.org/ftp/python/${python_version}/Python-${python_version}.tgz
ENV pip_url https://bootstrap.pypa.io/get-pip.py

RUN mkdir -p /src
WORKDIR /src

# Download/extract both Python and pip
RUN curl -q -# -L "${python_url}" -o Python-${python_version}.tgz
RUN curl -q -# -L "${pip_url}" -o get-pip.py
RUN tar zxf Python-${python_version}.tgz


# Build the python sources!
WORKDIR /src/Python-${python_version}
RUN $L32 ./configure --prefix=/usr
RUN $L32 make -j6
RUN $L32 make install

# Install pip, get requests with security (for SNI), and install virtualenv
RUN python /src/get-pip.py
RUN pip install virtualenv

# Now cleanup /src
WORKDIR /src
RUN rm -rf Python-${python_version}*
RUN rm -f get-pip.py

WORKDIR /
